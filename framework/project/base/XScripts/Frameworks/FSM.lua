---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lu ning
--- DateTime: 2020/7/10 11:36
--- 简单的有限状态机,通过配置初始化
---

local FSM = Class('FSM')

---------------------------私有方法----------------------------------------
--- 是否执行状态机更新
local function _isUpdate(self)
    return not self._paused and self._actived
end

--- 检测是否切换状态
local function _doCheck(self)
    local rules = self._conf.rules
    for _, rule in pairs(rules) do
        if rule.from == self._currentStat.tag then
            if rule.rule() then
                self:_switchStat(rule.to)
            end
        end
    end
end

-- 切换到指定状态
local function _switchStat(self, to)
    local toStat = self._conf.stats[to]
    self._currentStat.onExit()
    self._currentStat = toStat
    toStat.onEnter()
    toStat.exec()
end

--- 初始化
local function _prepareStat(self)
    self._currentStat = self._conf.stats[self._conf.default]
    self._actived = false
    self._paused = false
end

-------------------------公有方法----------------------
-- 初始化FSM
-- @param conf 状态机配置文件
function FSM:Init(conf)
    self._conf = conf
    _prepareStat(self)
end

--- 激活FSM
--- @return
function FSM:Active()
    self._actived = true
    self._currentStat.onEnter()
    self._currentStat.exec()
end

--- 关闭FSM
--- @return
function FSM:Deactive()
    self._actived = false
    self:Reset(false)
end

--- 暂停状态机刷新，暂停后update方法不再执行
--- 可以通过resume恢复
--- @return
function FSM:Pause()
    self._paused = true
end

--- 恢复状态机的运行
--- @return
function FSM:Resume()
    self._paused = false
end

--- 重置状态机
--- @isActive 是否激活
function FSM:Reset(isActive)
    _prepareStat(self)
    if isActive then
        self:Active()
    end
end

--- 状态机更新
--- @return
function FSM:Update()
    if not _isUpdate(self) then return end
    _doCheck(self)
end

--- 打印当前状态
function FSM:PrintCurrentStat()
    print('CurrentStat:', self._currentStat.tag)
end

return FSM
